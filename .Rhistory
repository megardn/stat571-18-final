# what about the number of new cases?
plot_cases_monthly <- df_cases %>%
ggplot(aes(x = month_year, y = monthly_new_cases, color = country, group = country)) +
geom_line(show.legend = FALSE) +
theme_bw() +
ggtitle("Worldwide monthly new cases") +
theme(legend.position="bottom")
ggplotly(plot_cases_monthly)
# and the number of new deaths?
plot_deaths_monthly <- df_cases %>%
ggplot(aes(x = month_year, y = monthly_new_deaths, color = country, group = country)) +
geom_line(show.legend = FALSE) +
theme_bw() +
ggtitle("Worldwide monthly new deaths") +
theme(legend.position="bottom")
ggplotly(plot_deaths_monthly)
# TODO
# world map of cumulative cases
# get non-NA vaccination reports
df_vac_nona <- df_vac %>%
# filter to keep only non-NA in people_vaccinated_per_hundred
drop_na(people_vaccinated_per_hundred) %>%
# group by month, year
group_by(month, year, country) %>%
# select first available value of each month
filter(date == min(date))
# let's see how the people_vaccinated_per_hundred evolved (ratio (in percent) between population immunized and total population up to the date in the country)
plot_vac_percent <- df_vac_nona %>%
# filter(country %in% c("USA", "China", "India")) %>% # to show only some countries
ggplot(aes(x = date, y = people_vaccinated_per_hundred, color = country, group = country)) +
geom_line(show.legend = FALSE) +
theme_bw() +
ggtitle("People vaccinated with respect to the country's total population (%)") +
theme(legend.position="bottom")
ggplotly(plot_vac_percent) # generate interactive plot
# let's see how the people_vaccinated_per_hundred evolved (ratio (in percent) between vaccination number and total population up to the date in the country)
plot_total_vac <- df_vac_nona %>%
# filter(country %in% c("United States", "China", "India")) %>% # to show only some countries
ggplot(aes(x = date, y = total_vaccinations_per_hundred, color = country, group = country)) +
geom_line(show.legend = FALSE) +
theme_bw() +
ggtitle("Total number of vaccine doses administered per 100 people in the total population (%)") +
theme(legend.position="bottom")
ggplotly(plot_total_vac) # generate interactive plot
# more data cleaning
# based on the vaccination plots above, we notice that some countries seem to have large "gaps" in their reporting of vaccination rates.
# Let's take a look at a few of these to see what's going on:
# df_vac[df_vac$country == "Pitcairn",]
# df_vac_nona[df_vac_nona$country == "Pitcairn",] # they only report 4 times
# df_vac[df_vac$country == "Saint Helena",]
# df_vac_nona[df_vac_nona$country == "Saint Helena",] # they also only report 4 times
# df_vac[df_vac$country == "United Arab Emirates",]
# df_vac_nona[df_vac_nona$country == "United Arab Emirates",] # they also only report 4 times
# df_vac[df_vac$country == "Afghanistan",]
# looks like some small islands have a very small population (e.g. Pitcairn has 47 current residents and they reported their vaccinations only once for all these people)
# Solution: filter out countries for which 90% of their rows are NAs (these countries report vaccine rates consistently enough to keep).
# Alternative: we could filter out countries with less than 6 data points (months) in total - which means they reported vaccinations for less than 1 year in total. Given that vaccinations started in later 2020 (so about 16 months ago), this should still be a generous cutoff.
df_vac_nona_clean <- df_vac %>%
# first group by country and keep only countries that have at least
########################### UNCOMMENT THIS TO FILTER OUT COUNTRIES THAT DID NOT PROVIDE ENOUGH VACCINATION REPORTS
# group_by(country) %>%
## get an idea of percent NAs per country
## summarise(
##   n_na = sum(is.na(people_vaccinated_per_hundred)),
##   n_total = length(people_vaccinated_per_hundred),
##   pct_na = sum(is.na(people_vaccinated_per_hundred)) / length(people_vaccinated_per_hundred) * 100
## )
##  remove countries for which 90% of their rows are NAs (these countries report vaccine rates consistently enough to keep)
# filter(sum(is.na(people_vaccinated_per_hundred)) / length(people_vaccinated_per_hundred) < 0.9) %>% #
# ungroup() %>%
###########################
# filter to keep only non-NA in people_vaccinated_per_hundred
drop_na(people_vaccinated_per_hundred) %>%
# group by month, year
group_by(month, year, country) %>%
# select first available value of each month
filter(date == min(date))
# let's generate the same plots again to see how that looks:
plot_vac_percent <- df_vac_nona_clean %>%
# filter(country %in% c("USA", "China", "India")) %>% # to show only some countries
ggplot(aes(x = date, y = people_vaccinated_per_hundred, color = country, group = country)) +
geom_line(show.legend = FALSE) +
theme_bw() +
ggtitle("People vaccinated with respect to the country's total population (%)") +
theme(legend.position="bottom")
ggplotly(plot_vac_percent) # generate interactive plot
# let's plot again
plot_total_vac <- df_vac_nona_clean %>%
# filter(country %in% c("United States", "China", "India")) %>% # to show only some countries
ggplot(aes(x = date, y = total_vaccinations_per_hundred, color = country, group = country)) +
geom_line(show.legend = FALSE) +
theme_bw() +
ggtitle("Total number of vaccine doses administered per 100 people in the total population (%)") +
theme(legend.position="bottom")
ggplotly(plot_total_vac) # generate interactive plot
# TODO
# world map of total number of vaccinations
# world map of total number of vaccinations
# select the most recent reported vaccination percent for every country
box_pct_vac <- df_vac_nona_clean %>%
group_by(country) %>%
filter(date == max(date)) %>%
# create new binning variable
mutate(binned_people_vaccinated_per_hundred = case_when(people_vaccinated_per_hundred < 30 ~ "Under 30%",
people_vaccinated_per_hundred >= 30 & people_vaccinated_per_hundred < 50 ~ "30-50%",
people_vaccinated_per_hundred >= 50 & people_vaccinated_per_hundred < 70 ~ "50-70%",
people_vaccinated_per_hundred >= 70 & people_vaccinated_per_hundred < 90 ~ "70-90%",
people_vaccinated_per_hundred >= 90 ~ "Above 90%"
)) %>%
ggplot(aes(x = forcats::fct_reorder(binned_people_vaccinated_per_hundred, -people_vaccinated_per_hundred, .fun = median), y = people_vaccinated_per_hundred,
group = binned_people_vaccinated_per_hundred, fill = binned_people_vaccinated_per_hundred, color = binned_people_vaccinated_per_hundred)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(aes(text=sprintf("Country: %s<br> Rate: %s", country, people_vaccinated_per_hundred))) +
labs(title = "Countries binned by their current vaccination rate",
x = "Current vaccination rates (March 2022)",
y = "Percent people vaccinated per 100 in total population",
color = "",
fill = "") +
theme_bw()
ggplotly(box_pct_vac, tooltip = "text")
# merge the cases and vaccinations dataset by country and date keeping all the df_cases rows
df_merged <- merge(df_cases,
df_vac_nona_clean[ , -which(names(df_vac_nona_clean) %in% c("year", "month_num","month"))],
by = c("country", "date"), all.x = TRUE)
# check that the merge is correct
# df_merged[df_merged$country == "Argentina",]
# df_vac_nona_clean[df_vac_nona_clean$country == "Argentina",]
# yep all seems good (most dates do not have vaccination reports, only certain ones like for instance 2022-03-01)
# find dates corresponding to important vaccination milestones
df_merged <- df_merged %>%
group_by(country) %>%
mutate(vaccination_events = as.factor(case_when(people_vaccinated_per_hundred >= 90 ~ "vac_90pct",
people_vaccinated_per_hundred >= 70 ~ "vac_70pct",
people_vaccinated_per_hundred >= 50 ~ "vac_50pct",
people_vaccinated_per_hundred >= 30 ~ "vac_30pct",
people_vaccinated_per_hundred >= 0 ~ "vac_start",
TRUE ~ "no")),
vaccination_events = replace(vaccination_events, duplicated(vaccination_events), NA) # keep only first occurrence of an event
)
# check outputs
# df_merged[df_merged$country == "Sweden", c("date", "people_vaccinated_per_hundred", "vaccination_events")]
# Add percent vaccinated bins variable to main df
bins_df <- df_vac_nona_clean %>%
group_by(country) %>%
filter(date == max(date)) %>%
# create new binning variable
mutate(binned_people_vaccinated_per_hundred = case_when(people_vaccinated_per_hundred < 30 ~ "Under 30%",
people_vaccinated_per_hundred >= 30 & people_vaccinated_per_hundred < 50 ~ "30-50%",
people_vaccinated_per_hundred >= 50 & people_vaccinated_per_hundred < 70 ~ "50-70%",
people_vaccinated_per_hundred >= 70 & people_vaccinated_per_hundred < 90 ~ "70-90%",
people_vaccinated_per_hundred >= 90 ~ "Above 90%"
)) %>%
select(country, binned_people_vaccinated_per_hundred)
# merge with main
df_merged <- merge(df_merged, bins_df, by = c("country"), all.x = TRUE)
# filter some countries
vac_events_sub <- df_merged %>%
filter(country %in% c("USA", "Brazil", "Cuba", "Italy", "France", "Germany", "Japan", "India", "Australia", "South Africa", "Egypt", "Sudan"))
# create vaccination start df
vac_start_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_start")
# create vaccination 30% df
vac_30_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_30pct")
# create vaccination 30% df
vac_50_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_50pct")
# create vaccination 30% df
vac_70_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_70pct")
# create vaccination 30% df
vac_90_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_90pct")
# daily cases with weekly average number of new cases
plot_cases_weekly <- vac_events_sub %>%
ggplot() +
geom_histogram(aes(x = date, y = daily_new_cases, color = country, group = country), stat = "identity", alpha = 0.5, binwidth = 0.1) +
geom_line(aes(x = date, y = weekly_new_cases), color = "darkblue", show.legend = FALSE) +
facet_wrap(~country) +
# this will generate some warnings when not all countries have all milestones, nothing to worry about
geom_vline(data = vac_start_df, aes(xintercept = as.numeric(date), text = sprintf("Start date: %s", date)), linetype = 2, color = "black") +
geom_vline(data = vac_30_df, aes(xintercept = as.numeric(date), text = sprintf("30 pct vaccinated: %s", date)), linetype = 2, color = "grey40") +
geom_vline(data = vac_50_df, aes(xintercept = as.numeric(date), text = sprintf("50 pct vaccinated: %s", date)), linetype = 2, color = "grey50") +
geom_vline(data = vac_70_df, aes(xintercept = as.numeric(date), text = sprintf("70 pct vaccinated: %s", date)), linetype = 2, color = "grey60") +
geom_vline(data = vac_90_df, aes(xintercept = as.numeric(date), text = sprintf("90 pct vaccinated: %s", date)), linetype = 2, color = "grey70") +
# geom_text(data = vac_start_df, aes(x = as.Date(date), y = 750000, label = date)) + # add static event labels
theme_bw() +
ggtitle("Worldwide daily new cases and vaccination milestones") +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
ggplotly(plot_cases_weekly, tooltip = "text")
# and the number of new deaths?
plot_deaths_weekly <- vac_events_sub %>%
ggplot() +
geom_histogram(aes(x = date, y = daily_new_deaths, color = country, group = country), stat = "identity", alpha = 0.5, binwidth = 0.1) +
geom_line(aes(x = date, y = weekly_new_deaths), color = "darkblue", show.legend = FALSE) +
facet_wrap(~country) +
# this will generate some warnings when not all countries have all milestones, nothing to worry about
geom_vline(data = vac_start_df, aes(xintercept = as.numeric(date), text = sprintf("Start date: %s", date)), linetype = 2, color = "black") +
geom_vline(data = vac_30_df, aes(xintercept = as.numeric(date), text = sprintf("30 pct vaccinated: %s", date)), linetype = 2, color = "grey40") +
geom_vline(data = vac_50_df, aes(xintercept = as.numeric(date), text = sprintf("50 pct vaccinated: %s", date)), linetype = 2, color = "grey50") +
geom_vline(data = vac_70_df, aes(xintercept = as.numeric(date), text = sprintf("70 pct vaccinated: %s", date)), linetype = 2, color = "grey60") +
geom_vline(data = vac_90_df, aes(xintercept = as.numeric(date), text = sprintf("90 pct vaccinated: %s", date)), linetype = 2, color = "grey70") +
# geom_text(data = vac_start_df, aes(x = as.Date(date), y = 750000, label = date)) + # add static event labels
theme_bw() +
ggtitle("Worldwide daily new deaths and vaccination milestones") +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45))
ggplotly(plot_deaths_weekly, tooltip = "text")
# find dates corresponding to important vaccination milestones
df_merged <- df_merged %>%
group_by(country) %>%
mutate(vaccine_dose_events = as.factor(case_when(total_vaccinations_per_hundred >= 300 ~ "3_doses",
total_vaccinations_per_hundred >= 200 ~ "2_doses",
total_vaccinations_per_hundred >= 100 ~ "1_dose",
TRUE ~ "no")),
vaccine_dose_events = replace(vaccine_dose_events, duplicated(vaccine_dose_events), NA) # keep only first occurrence of an event
)
# check outputs
# df_merged[df_merged$country == "Sweden", c("date", "total_vaccinations_per_hundred", "vaccine_dose_events")]
# filter some countries
vac_events_sub <- df_merged %>%
filter(country %in% c("USA", "Brazil", "Cuba", "Italy", "France", "Germany", "Japan", "India", "Australia", "South Africa", "Egypt", "Sudan"))
# create 1st dose df
vac_1_dose <- vac_events_sub %>%
select(country, date, vaccine_dose_events) %>%
filter(vaccine_dose_events == "1_dose")
# create 2nd dose df
vac_2_doses <- vac_events_sub %>%
select(country, date, vaccine_dose_events) %>%
filter(vaccine_dose_events == "2_doses")
# create 3rd dose df
vac_3_doses <- vac_events_sub %>%
select(country, date, vaccine_dose_events) %>%
filter(vaccine_dose_events == "3_doses")
# daily cases with weekly average number of new cases
plot_cases_weekly <- vac_events_sub %>%
ggplot() +
geom_histogram(aes(x = date, y = daily_new_cases, color = country, group = country), stat = "identity", alpha = 0.5, binwidth = 0.1) +
geom_line(aes(x = date, y = weekly_new_cases), color = "darkblue", show.legend = FALSE) +
facet_wrap(~country) +
# this will generate some warnings when not all countries have all milestones, nothing to worry about
geom_vline(data = vac_1_dose, aes(xintercept = as.numeric(date), text = sprintf("1st dose: %s", date)), linetype = 2, color = "black") +
geom_vline(data = vac_2_doses, aes(xintercept = as.numeric(date), text = sprintf("2nd dose: %s", date)), linetype = 2, color = "grey40") +
geom_vline(data = vac_3_doses, aes(xintercept = as.numeric(date), text = sprintf("3rd dose: %s", date)), linetype = 2, color = "grey50") +
# geom_text(data = vac_start_df, aes(x = as.Date(date), y = 750000, label = date)) + # add static event labels
theme_bw() +
ggtitle("Worldwide daily new cases and vaccine doses milestones") +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
ggplotly(plot_cases_weekly, tooltip = "text")
# and the number of new deaths?
plot_deaths_weekly <- vac_events_sub %>%
ggplot() +
geom_histogram(aes(x = date, y = daily_new_deaths, color = country, group = country), stat = "identity", alpha = 0.5, binwidth = 0.1) +
geom_line(aes(x = date, y = weekly_new_deaths), color = "darkblue", show.legend = FALSE) +
facet_wrap(~country) +
# this will generate some warnings when not all countries have all milestones, nothing to worry about
geom_vline(data = vac_1_dose, aes(xintercept = as.numeric(date), text = sprintf("1st dose: %s", date)), linetype = 2, color = "black") +
geom_vline(data = vac_2_doses, aes(xintercept = as.numeric(date), text = sprintf("2nd dose: %s", date)), linetype = 2, color = "grey40") +
geom_vline(data = vac_3_doses, aes(xintercept = as.numeric(date), text = sprintf("3rd dose: %s", date)), linetype = 2, color = "grey50") +
# geom_text(data = vac_start_df, aes(x = as.Date(date), y = 750000, label = date)) + # add static event labels
theme_bw() +
ggtitle("Worldwide daily new deaths and vaccine doses milestones") +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45))
ggplotly(plot_deaths_weekly, tooltip = "text")
# daily cases with weekly average number of new cases
plot_cases_weekly <- df_merged %>%
ggplot() +
geom_histogram(aes(x = date, y = daily_new_cases,
color = binned_people_vaccinated_per_hundred,
group = binned_people_vaccinated_per_hundred), stat = "identity", alpha = 0.5, binwidth = 0.1) +
geom_line(aes(x = date, y = weekly_new_cases), color = "darkblue", show.legend = FALSE) +
facet_wrap(~binned_people_vaccinated_per_hundred) +
theme_bw() +
ggtitle("Worldwide daily new cases by vaccination rates") +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
ggplotly(plot_cases_weekly, tooltip = "text")
# and the number of new deaths?
plot_deaths_weekly <- df_merged %>%
ggplot() +
geom_histogram(aes(x = date, y = daily_new_deaths,
color = binned_people_vaccinated_per_hundred,
group = binned_people_vaccinated_per_hundred), stat = "identity", alpha = 0.5, binwidth = 0.1) +
geom_line(aes(x = date, y = weekly_new_deaths), color = "darkblue", show.legend = FALSE) +
facet_wrap(~binned_people_vaccinated_per_hundred) +
theme_bw() +
ggtitle("Worldwide daily new deaths and vaccine doses milestones") +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45))
ggplotly(plot_deaths_weekly, tooltip = "text")
# save merged df (this will be used to merge with the sustainability data)
write.csv(df_merged, "data/covid_cases_vaccines_clean.csv")
library(pacman)
p_load(dplyr, tidyverse, ggplot2, car, skimr, nnet, randomForest)
data.raw <- read.csv('data/WorldSustainabilityDataset.csv', header = TRUE)
head(data.raw)
data.raw[data.raw == ""] <- NA
data.90 <- data.raw[, apply(data.raw, 2, function(col)sum(is.na(col))/length(col)) < 0.10]
skim(data.90)
data.processed <- na.omit(data.90)
# How many countries?
n.countries <- length(unique(data.processed$Country.Name))
n.countries
names(data.processed)[4] <- "Electricity.Access"
names(data.processed)[5] <- "Adj.SavingNetCO2Damage"
names(data.processed)[6] <- "Adj.SavingNaturalResourceDepletion"
names(data.processed)[7] <- "Adj.SavingNetForestDepletion"
names(data.processed)[8] <- "Adj.SavingParticulateEmissions"
names(data.processed)[9] <- "CompulsoryEducationDurationYears"
names(data.processed)[10] <- "ExportGoodsServices.GDP"
names(data.processed)[11] <- "FinalConsumptionExpenditure.GDP"
names(data.processed)[12] <- "GDP.Current"
names(data.processed)[13] <- "GDP.PerCapita.Current"
names(data.processed)[14] <- "Govt.FinalConsumptionExpenditure.GDP"
names(data.processed)[15] <- "GrossNationalExpenditure.GDP"
names(data.processed)[16] <- "ImportGoodsServices.GDP"
names(data.processed)[17] <- "ConsumerPriceInflation"
names(data.processed)[18] <- "ProportionParliamentSeats.Women"
names(data.processed)[19] <- "RenewableEnergyConsumption.pctOfTotal"
names(data.processed)[20] <- "Trade.GDP"
names(data.processed)[21] <- "WomenInBusinessLawIndex"
names(data.processed)[22] <- "AnnualProductionBasedCO2Emissions"
names(data.processed)[24] <- "WorldBankIncomeClass"
names(data.processed)[25] <- "IndividualsUsingInternet"
names(data.processed)[26] <- "LifeExpenctancy"
names(data.processed)[27] <- "TotalPopulation"
names(data.processed)[28] <- "RegimeType"
names(data.processed)[29] <- "RuralPopulation.Prop"
names(data.processed)[30] <- "TotalNaturalResources.GDP"
names(data.processed)[31] <- "UrbanPopulation.Prop"
names(data.processed)[32] <- "WorldRegion"
names(data.processed)
data.processed$RegimeType <- as.factor(data.processed$RegimeType)
data.processed$WorldRegion <- as.factor(data.processed$WorldRegion)
data.processed$WorldBankIncomeClass <- as.factor(data.processed$WorldBankIncomeClass)
# Frequency of Regime Types in our data
ggplot(data.processed, aes(x=fct_infreq(RegimeType), fill=fct_infreq(RegimeType))) +
geom_bar(show.legend = FALSE) +
xlab("Regime Type") +
ylab("Count") +
ggtitle("Frequency of Regime Type")
# World Region Representation
ggplot(data.processed, aes(x=fct_infreq(WorldRegion), fill=fct_infreq(WorldRegion))) +
geom_bar(show.legend = FALSE) +
xlab("Region") +
ylab("Count") +
ggtitle("Frequency of World Regions")
# GDP per Capita by WorldRegion
ggplot(data.processed, aes(y=GDP.PerCapita.Current, x=WorldRegion, fill=WorldRegion)) +
geom_boxplot(show.legend = FALSE) +
xlab("WorldRegion") +
ylab("GDP Per Capita") +
ggtitle("Per Capita GDP by WorldRegion")
# Internet Use by WorldRegion
ggplot(data.processed, aes(y=IndividualsUsingInternet, x=WorldRegion, fill=WorldRegion)) +
geom_boxplot(show.legend = FALSE) +
xlab("WorldRegion") +
ylab("Internet Users") +
ggtitle("Internet Users by WorldRegion")
# EUROPE AND NORTH AMERICA
# Do internet users incease over time
ggplot(data.processed[data.processed$WorldRegion=="Europe and Northern America", ], aes(y=IndividualsUsingInternet, x=Year, colour=Country.Name)) +
geom_point(show.legend = FALSE) +
xlab("Year") +
ylab("Internet Users") +
ggtitle("Internet Users by Year in Europe + North America")
# Does urban population incease over time
ggplot(data.processed[data.processed$WorldRegion=="Europe and Northern America", ], aes(y=UrbanPopulation.Prop, x=Year, colour=Country.Name)) +
geom_point(show.legend = FALSE) +
xlab("Year") +
ylab("Urban Population Proportion") +
ggtitle("Proportion Urban Population by Year in Europe + North America")
# ASIA
# Do internet users incease over time
ggplot(data.processed[data.processed$WorldRegion=="Central and Southern Asia", ], aes(y=IndividualsUsingInternet, x=Year, colour=Country.Name)) +
geom_point(show.legend = FALSE) +
xlab("Year") +
ylab("Internet Users") +
ggtitle("Internet Users by Year in Central and Southern Asia")
# Does urban population incease over time
ggplot(data.processed[data.processed$WorldRegion=="Central and Southern Asia", ], aes(y=UrbanPopulation.Prop, x=Year, colour=Country.Name)) +
geom_point(show.legend = FALSE) +
xlab("Year") +
ylab("Urban Population Proportion") +
ggtitle("Proportion Urban Population by Year in Central and Southern Asia")
data.complete$country
library(pacman)
pacman::p_load(tree, rpart, randomForest, ranger, rattle, pROC, partykit, ggplot2, glmnet,lda, data.table, ISLR, car, dplyr, tidyverse, stats, skimr)
data.full <- read.csv('data/case.wsd.wide-predictors.csv')
head(data.full)
names(data.full)
#read in
new.data.with.VSI <- read.csv("data/VaccinationSucessIndexData-New.csv")
yval <- new.data.with.VSI %>% dplyr::select("country", "VSI")
data.full <- inner_join(data.full, yval,  by=("country"))
skim(data.full)
data.90 <- data.full[, apply(data.full, 2, function(col)sum(is.na(col))/length(col)) < 0.10]
data.complete <- na.omit(data.90)
nrow(data.complete)
data.complete$country
data.complete %>%
select(-country, -Country.Code)
data.complete <- data.complete %>%
select(c(-country, -Country.Code)
library(pacman)
```{r}
data.90 <- data.full[, apply(data.full, 2, function(col)sum(is.na(col))/length(col)) < 0.10]
data.complete <- na.omit(data.90)
nrow(data.complete)
data.complete <- data.complete %>%
select(c(-country, -Country.Code))
library(pacman)
pacman::p_load(tree, rpart, randomForest, ranger, rattle, pROC, partykit, ggplot2, glmnet,lda, data.table, ISLR, car, dplyr, tidyverse, stats, skimr)
data.full <- read.csv('data/case.wsd.wide-predictors.csv')
head(data.full)
names(data.full)
#read in
new.data.with.VSI <- read.csv("data/VaccinationSucessIndexData-New.csv")
yval <- new.data.with.VSI %>% dplyr::select("country", "VSI")
data.full <- inner_join(data.full, yval,  by=("country"))
skim(data.full)
data.90 <- data.full[, apply(data.full, 2, function(col)sum(is.na(col))/length(col)) < 0.10]
data.complete <- na.omit(data.90)
nrow(data.complete)
data.complete <- data.complete %>%
select(-country) %>% select(-Country.Code)
library(pacman)
pacman::p_load(tree, rpart, randomForest, ranger, rattle, pROC, partykit, ggplot2, glmnet,lda, data.table, ISLR, car, dplyr, tidyverse, stats, skimr)
data.full <- read.csv('data/case.wsd.wide-predictors.csv')
head(data.full)
names(data.full)
#read in
new.data.with.VSI <- read.csv("data/VaccinationSucessIndexData-New.csv")
yval <- new.data.with.VSI %>% dplyr::select("country", "VSI")
data.full <- inner_join(data.full, yval,  by=("country"))
skim(data.full)
data.90 <- data.full[, apply(data.full, 2, function(col)sum(is.na(col))/length(col)) < 0.10]
data.complete <- na.omit(data.90)
nrow(data.complete)
data.complete <- data.complete %>%
dplyr::select(-country, -Country.Code)
library(pacman)
pacman::p_load(tree, rpart, randomForest, ranger, rattle, pROC, partykit, ggplot2, glmnet,lda, data.table, ISLR, car, dplyr, tidyverse, stats, skimr)
data.full <- read.csv('data/case.wsd.wide-predictors.csv')
head(data.full)
names(data.full)
#read in
new.data.with.VSI <- read.csv("data/VaccinationSucessIndexData-New.csv")
yval <- new.data.with.VSI %>% dplyr::select("country", "VSI")
data.full <- inner_join(data.full, yval,  by=("country"))
skim(data.full)
data.90 <- data.full[, apply(data.full, 2, function(col)sum(is.na(col))/length(col)) < 0.10]
data.complete <- na.omit(data.90)
nrow(data.complete)
data.complete <- data.complete %>%
dplyr::select(-c(country, Country.Code))
library(pacman)
pacman::p_load(tree, rpart, randomForest, ranger, rattle, pROC, partykit, ggplot2, glmnet,lda, data.table, ISLR, car, dplyr, tidyverse, stats, skimr)
data.full <- read.csv('data/case.wsd.wide-predictors.csv')
head(data.full)
names(data.full)
#read in
new.data.with.VSI <- read.csv("data/VaccinationSucessIndexData-New.csv")
yval <- new.data.with.VSI %>% dplyr::select("country", "VSI")
data.full <- inner_join(data.full, yval,  by=("country"))
skim(data.full)
data.90 <- data.full[, apply(data.full, 2, function(col)sum(is.na(col))/length(col)) < 0.10]
data.complete <- na.omit(data.90)
nrow(data.complete)
data.complete <- data.complete %>%
dplyr::select(country)
library(pacman)
pacman::p_load(tree, rpart, randomForest, ranger, rattle, pROC, partykit, ggplot2, glmnet,lda, data.table, ISLR, car, dplyr, tidyverse, stats, skimr)
data.full <- read.csv('data/case.wsd.wide-predictors.csv')
head(data.full)
names(data.full)
#read in
new.data.with.VSI <- read.csv("data/VaccinationSucessIndexData-New.csv")
yval <- new.data.with.VSI %>% dplyr::select("country", "VSI")
data.full <- inner_join(data.full, yval,  by=("country"))
skim(data.full)
data.90 <- data.full[, apply(data.full, 2, function(col)sum(is.na(col))/length(col)) < 0.10]
data.complete <- na.omit(data.90)
nrow(data.complete)
data.complete <- data.complete %>%
dplyr::select(-country)
fit.final.rf <- randomForest(VSI~., data.complete, mtry=60, ntree=100)
plot(fit.final.rf)
set.seed(1) # for reproducibility, we set the seed
fit.1.rf <- randomForest(VSI~., data.complete, mtry=6, ntree=500)
plot(fit.1.rf)
error.p <- 1:150
for (p in 1:150)
{
rf.temp <- randomForest(VSI~., data.complete, mtry=p, ntree=100)
error.p[p] <- rf.temp$mse[100]
}
plot(1:150, error.p, pch=16,
main = "Testing errors of mtry with 100 trees",
xlab="mtry",
ylab="OOB mse of mtry")
lines(1:150, error.p)
fit.final.rf <- randomForest(VSI~., data.complete, mtry=60, ntree=100)
plot(fit.final.rf)
fit.final.rf <- randomForest(VSI~., data.complete, mtry=60, ntree=1000)
plot(fit.final.rf)
fit.final.rf <- randomForest(VSI~., data.complete, mtry=100, ntree=1000)
plot(fit.final.rf)
fit.final.rf <- randomForest(VSI~., data.complete, mtry=60, ntree=1000)
plot(fit.final.rf)
