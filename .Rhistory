# monthly
group_by(month_num, year, country) %>%
mutate(
monthly_new_cases = sum(daily_new_cases, na.rm = TRUE),
monthly_new_deaths = sum(daily_new_deaths, na.rm = TRUE),
monthly_new_cases_per_hundred = sum(daily_new_cases_per_hundred, na.rm = TRUE),
monthly_new_deaths_per_hundred = sum(daily_new_deaths_per_hundred, na.rm = TRUE),
month_year = make_date(year, month_num)
) %>%
ungroup() %>%
# weekly
group_by(week, year, country, month_num) %>%
mutate(
weekly_new_cases = mean(daily_new_cases, na.rm = TRUE),
weekly_new_deaths = mean(daily_new_deaths, na.rm = TRUE),
weekly_new_cases_per_hundred = sum(daily_new_cases_per_hundred, na.rm = TRUE),
weekly_new_deaths_per_hundred = sum(daily_new_deaths_per_hundred, na.rm = TRUE),
month_year = make_date(year, month_num)
)
# load vaccination data
df_vac <- read.csv("data/country_vaccinations.csv")
# transform some variables
df_vac <- df_vac %>%
mutate(country = as.factor(country),
country = recode_factor(country, `United States` = "USA"),
iso_code = as.factor(iso_code),
vaccines = as.factor(vaccines),
date = lubridate::ymd(date),
year = lubridate::year(date),
month_num = lubridate::month(date))
df_vac$month <- month.abb[df_vac$month_num] # convert to month names
# keep only countries that report on people vaccinated per hundred as this is one of the more important metrics
df_vac_nona_clean <- df_vac %>%
# filter to keep only non-NA in people_vaccinated_per_hundred
drop_na(people_vaccinated_per_hundred) %>%
# group by month, year
group_by(month, year, country) %>%
# select first available value of each month
filter(date == min(date))
# merge the cases and vaccinations dataset by country and date keeping all the df_cases rows
df_merged <- merge(df_cases,
df_vac_nona_clean[ , -which(names(df_vac_nona_clean) %in% c("year", "month_num","month"))],
by = c("country", "date"), all.x = TRUE)
# find dates corresponding to important vaccination milestones
df_merged <- df_merged %>%
group_by(country) %>%
mutate(vaccination_events = as.factor(case_when(people_vaccinated_per_hundred >= 90 ~ "vac_90pct",
people_vaccinated_per_hundred >= 80 ~ "vac_80pct",
people_vaccinated_per_hundred >= 70 ~ "vac_70pct",
people_vaccinated_per_hundred >= 60 ~ "vac_60pct",
people_vaccinated_per_hundred >= 50 ~ "vac_50pct",
people_vaccinated_per_hundred >= 40 ~ "vac_40pct",
people_vaccinated_per_hundred >= 30 ~ "vac_30pct",
people_vaccinated_per_hundred >= 20 ~ "vac_20pct",
people_vaccinated_per_hundred >= 10 ~ "vac_10pct",
people_vaccinated_per_hundred >= 0 & people_vaccinated_per_hundred < 10 ~ "vac_start",
TRUE ~ "no")),
vaccination_events = replace(vaccination_events, duplicated(vaccination_events), NA) # keep only first occurrence of an event
)
# Add percent vaccinated bins AT LATEST REPORTED DATE
bins_df <- df_vac_nona_clean %>%
group_by(country) %>%
filter(date == max(date)) %>% # filter for the last reported date in each country
# create new binning variable
mutate(binned_people_vaccinated_per_hundred = case_when(people_vaccinated_per_hundred < 10 ~ "Under 10%",
people_vaccinated_per_hundred >= 10 & people_vaccinated_per_hundred < 20 ~ "10-20%",
people_vaccinated_per_hundred >= 20 & people_vaccinated_per_hundred < 30 ~ "20-30%",
people_vaccinated_per_hundred >= 30 & people_vaccinated_per_hundred < 40 ~ "30-40%",
people_vaccinated_per_hundred >= 40 & people_vaccinated_per_hundred < 50 ~ "40-50%",
people_vaccinated_per_hundred >= 50 & people_vaccinated_per_hundred < 60 ~ "50-60%",
people_vaccinated_per_hundred >= 60 & people_vaccinated_per_hundred < 70 ~ "60-70%",
people_vaccinated_per_hundred >= 70 & people_vaccinated_per_hundred < 80 ~ "70-80%",
people_vaccinated_per_hundred >= 80 & people_vaccinated_per_hundred < 90 ~ "80-90%",
people_vaccinated_per_hundred >= 90 ~ "Above 90%"
)) %>%
select(country, binned_people_vaccinated_per_hundred)
# merge with main
df_merged <- merge(df_merged, bins_df, by = c("country"), all.x = TRUE)
# checking that there are no countries with more than 10% vaccinated at their vac_start mark
df_merged %>%
filter(vaccination_events == "vac_start" & people_vaccinated_per_hundred > 10) %>%
select(country, vaccination_events, people_vaccinated_per_hundred)
# find dates corresponding to important vaccination milestones
df_merged <- df_merged %>%
group_by(country) %>%
mutate(vaccine_dose_events = as.factor(case_when(total_vaccinations_per_hundred >= 300 ~ "3_doses",
total_vaccinations_per_hundred >= 200 ~ "2_doses",
total_vaccinations_per_hundred >= 100 ~ "1_dose",
TRUE ~ "no")),
vaccine_dose_events = replace(vaccine_dose_events, duplicated(vaccine_dose_events), NA) # keep only first occurrence of an event
)
# let's look at df_merged
# head(df_merged)
# dim(df_merged)
# save merged df (this will be used to merge with the sustainability data)
write.csv(df_merged, "data/covid_cases_vaccines_clean.csv")
#rename prior to merge with WSD
covid <- df_merged %>% ungroup()
#save(covid, file = "data/covid_cases_vaccines_clean.Rda")
#renaming country levels for compatibility with WSD
covid$country <- recode_factor(covid$country, "UK"="United Kingdom", "Gambia"="Gambia, The", "Laos"="Lao PDR", "Egypt"="Egypt, Arab Rep.", "South Korea"="Korea, Rep.", "USA"="United States", "Russia"="Russian Federation", "Venezuela"="Venezuela, RB", "Democratic Republic Of The Congo"="DRC")
skim(covid)
# total people vaccinated per hundred
plot_vac_percent <- covid %>%
ggplot(aes(x = date, y = people_vaccinated_per_hundred, color = country, group = country)) +
geom_line(show.legend = FALSE) +
theme_bw() +
ggtitle("People vaccinated with respect to the country's total population (%)") +
theme(legend.position="bottom")
ggplotly(plot_vac_percent) # generate interactive plot
# total vaccine doses per hundred
plot_total_vac <- covid %>%
ggplot(aes(x = date, y = total_vaccinations_per_hundred, color = country, group = country)) +
geom_line(show.legend = FALSE) +
theme_bw() +
ggtitle("Total number of vaccine doses administered per 100 people in the total population (%)") +
theme(legend.position="bottom")
ggplotly(plot_total_vac) # generate interactive plot
# select the most recent reported vaccination percent for every country
box_pct_vac <- covid %>%
drop_na(people_vaccinated_per_hundred) %>%
group_by(month, year, country) %>%
filter(date == min(date)) %>% # select first available value of each month
group_by(country) %>%
filter(date == max(date)) %>%
ggplot(aes(x = forcats::fct_reorder(binned_people_vaccinated_per_hundred, -people_vaccinated_per_hundred, .fun = median), y = people_vaccinated_per_hundred,
group = binned_people_vaccinated_per_hundred, fill = binned_people_vaccinated_per_hundred, color = binned_people_vaccinated_per_hundred)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(aes(text=sprintf("Country: %s<br> Rate: %s", country, people_vaccinated_per_hundred))) +
labs(title = "Countries binned by their current vaccination rate",
x = "Current vaccination rates (March 2022)",
y = "Percent people vaccinated per 100 in total population",
color = "",
fill = "") +
theme_bw()
ggplotly(box_pct_vac, tooltip = "text")
# filter some countries
vac_events_sub <- covid %>%
filter(country %in% c("USA", "Brazil", "Cuba", "Italy", "France", "Germany", "Japan", "India", "Australia", "South Africa", "Egypt", "Sudan"))
# create vaccination start df
vac_start_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_start")
# create vaccination 30% df
vac_30_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_30pct")
# create vaccination 30% df
vac_50_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_50pct")
# create vaccination 30% df
vac_70_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_70pct")
# create vaccination 30% df
vac_90_df <- vac_events_sub %>%
select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_90pct")
# daily cases with weekly average number of new cases
plot_cases_weekly <- vac_events_sub %>%
ggplot() +
geom_histogram(aes(x = date, y = daily_new_cases, color = country, group = country, fill = country),
stat = "identity", alpha = 0.5, binwidth = 0.1) +
geom_line(aes(x = date, y = weekly_new_cases), color = "darkblue", show.legend = FALSE) +
facet_wrap(~country) +
# this will generate some warnings when not all countries have all milestones, nothing to worry about
geom_vline(data = vac_start_df, aes(xintercept = as.numeric(date), text = sprintf("Start date: %s", date)), linetype = 2, color = "black") +
geom_vline(data = vac_30_df, aes(xintercept = as.numeric(date), text = sprintf("30 pct vaccinated: %s", date)), linetype = 2, color = "grey40") +
geom_vline(data = vac_50_df, aes(xintercept = as.numeric(date), text = sprintf("50 pct vaccinated: %s", date)), linetype = 2, color = "grey50") +
geom_vline(data = vac_70_df, aes(xintercept = as.numeric(date), text = sprintf("70 pct vaccinated: %s", date)), linetype = 2, color = "grey60") +
geom_vline(data = vac_90_df, aes(xintercept = as.numeric(date), text = sprintf("90 pct vaccinated: %s", date)), linetype = 2, color = "grey70") +
# geom_text(data = vac_start_df, aes(x = as.Date(date), y = 750000, label = date)) + # add static event labels
theme_bw() +
ggtitle("Worldwide daily new cases and vaccination milestones") +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
ggplotly(plot_cases_weekly, tooltip = "text")
# and the number of new deaths?
plot_deaths_weekly <- vac_events_sub %>%
ggplot() +
geom_histogram(aes(x = date, y = daily_new_deaths, color = country, group = country, fill = country),
stat = "identity", alpha = 0.5, binwidth = 0.1) +
geom_line(aes(x = date, y = weekly_new_deaths), color = "darkblue", show.legend = FALSE) +
facet_wrap(~country) +
# this will generate some warnings when not all countries have all milestones, nothing to worry about
geom_vline(data = vac_start_df, aes(xintercept = as.numeric(date), text = sprintf("Start date: %s", date)), linetype = 2, color = "black") +
geom_vline(data = vac_30_df, aes(xintercept = as.numeric(date), text = sprintf("30 pct vaccinated: %s", date)), linetype = 2, color = "grey40") +
geom_vline(data = vac_50_df, aes(xintercept = as.numeric(date), text = sprintf("50 pct vaccinated: %s", date)), linetype = 2, color = "grey50") +
geom_vline(data = vac_70_df, aes(xintercept = as.numeric(date), text = sprintf("70 pct vaccinated: %s", date)), linetype = 2, color = "grey60") +
geom_vline(data = vac_90_df, aes(xintercept = as.numeric(date), text = sprintf("90 pct vaccinated: %s", date)), linetype = 2, color = "grey70") +
# geom_text(data = vac_start_df, aes(x = as.Date(date), y = 750000, label = date)) + # add static event labels
theme_bw() +
ggtitle("Worldwide daily new deaths and vaccination milestones") +
theme(legend.position="bottom", axis.text.x = element_text(angle = 45))
ggplotly(plot_deaths_weekly, tooltip = "text")
#last day with data for each country
last.timepoint1 <- covid %>% group_by(country) %>%
arrange(country,date) %>%
slice_tail(n=1) %>%
ungroup()
last.timepoint_filt <- last.timepoint1[, which(colMeans(!is.na(last.timepoint1)) > 0.5)] #remove cols with NA > 50%
#skim(last.timepoint_filt)
# get missing column names
missing_vac_cols <-  names(which(colMeans(is.na(last.timepoint1)) > 0.5))
# add last reported (within 2022) vaccination info
vac_info_2022 <- covid %>%
drop_na(people_vaccinated_per_hundred) %>%   # filter to keep only non-NA in people_vaccinated_per_hundred
group_by(country) %>%
filter(date == max(date)) %>%   # keep last reported date for every country
filter(year == 2022) %>% # keep only countries who last reported in 2022 (as we are interested in a recent vaccination status)
# filter(month_year == "2022-03-01") # could also filter for march 2022 specifically
dplyr::select(country, date, missing_vac_cols) %>% # keep only variables not yet included in last.timepoint
rename(date.vac = date)# rename the date to correspond to last reported vaccine info
# merge the last reported vaccination info with last reported cases/deaths info
last.timepoint <- merge(last.timepoint_filt, vac_info_2022, by = "country")
colnames(last.timepoint)[2:43] <- paste(colnames(last.timepoint)[2:43], "last", sep = "_") #add suffix
#names(last.timepoint)
# #find date of vaccination events
# table(covid$vaccination_events)
# table(covid$vaccine_dose_events)
summary(last.timepoint$date.vac_last)
# find the date each country reported starting to vaccinate
vac_start_df <- covid %>%
dplyr::select(country, date, vaccination_events) %>%
filter(vaccination_events == "vac_start") %>%
mutate(days.to.start_rel = as.numeric(difftime(date, min(date), units = "days")),
days.to.start_abs = as.numeric(difftime(date, "2020-12-01", units = "days"))) %>%
rename(date.first.vac = date)
# adding date of first vaccination for each country back to the covid df so it can be used as a cutoff
vac_start_date <- vac_start_df %>% dplyr::select(country, date.first.vac)
covid <- full_join(covid, vac_start_date, by ="country")
# cases & deaths up until vaccines start - USE THIS!
covid_prevac <- covid %>%
group_by(country) %>%
drop_na(date.first.vac) %>%
subset(date < date.first.vac) %>%
arrange(country,date) %>%
slice_tail(n=1) %>%
ungroup() %>%
dplyr::select("country"| contains("case") | contains("death"))
colnames(covid_prevac)[2:19] <- paste(colnames(covid_prevac)[2:19], "prevac", sep = "_") #add suffix
#peak rates up until vaccinations start - USE THIS
covid_maxrate <- covid %>%
drop_na(date.first.vac) %>%
subset(date < date.first.vac) %>%
dplyr::select("country" | contains(c("new", "daily"))) %>%
dplyr::select(-contains("vac")) %>% #drop vac cols
group_by(country) %>%
mutate_if(is.numeric, ~replace(., is.na(.), -1)) %>% #temporarily replace na's with -1
summarise_if(is.numeric, max) %>%
na_if(-1) %>% #set -1's back to na
rename(daily.new.cases.per.100 = daily_new_cases_per_hundred,
daily.new.deaths.per.100 = daily_new_deaths_per_hundred,
monthly.new.cases.per.100 = monthly_new_cases_per_hundred,
monthly.new.deaths.per.100 = monthly_new_deaths_per_hundred,
weekly.new.cases.per.100 = weekly_new_cases_per_hundred,
weekly.new.deaths.per.100 = weekly_new_deaths_per_hundred) #using . and _ separators to match WSD in case we want to pivot long later
colnames(covid_maxrate)[2:13] <- paste(colnames(covid_maxrate)[2:13], "max", sep = "_") #add suffix
#df for cases and deaths
case.df_list <- list(covid_maxrate, covid_prevac) #ordered to prioritize when removing correlated vars
covid.predict <- case.df_list %>% reduce(full_join, by='country') %>% as.data.frame() #join
#skim(covid.predict)
#removing 1 of each very colinear pair, method from https://statisticsglobe.com/remove-highly-correlated-variables-from-data-frame-r
#stash year and non-numeric variables (just country)
covid.fac <- covid.predict %>%
select(negate(is.numeric))
#plot
# create correlation plot to see whether some variables are highly correlated (not tolerated by lm)
covid.predict %>%
select_if(., is.numeric) %>%
cor(., use = "pairwise.complete.obs") %>%
corrplot(method = "color",
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt = 45, #Text label color and rotation
# hide correlation coefficient on the principal diagonal
diag = FALSE
)
#get colinearities
covid.num <- covid.predict %>%
select(-contains("Year")) %>%
select_if(., is.numeric)
covid.corr <- covid.num %>%
cor(., use="pairwise.complete.obs")
#removing upper triangle
covid.corr[upper.tri(covid.corr)] <- 0
diag(covid.corr) <- 0
#remove vars at abs(0.97) threshold - keeping high to preserve as many variables as possible (also b/c we expect things to be correlated IRL)
covid.list <-  apply(covid.corr, 2, function(x) any(abs(x) > 0.97)) #list highly correlated variables
covid.nocor <- covid.num[ , !covid.list]
#add back factors
covid.nocor <- cbind(covid.fac, covid.nocor)
# dim(covid.nocor)
# head(covid.nocor)
#days until country admins 1 dose per person
vac_1_dose <- covid %>%
dplyr::select(country, date, vaccine_dose_events, date.first.vac) %>% #
filter(vaccine_dose_events == "1_dose")%>%
mutate(days.to.1d_rel = as.numeric(difftime(date, min(date), units = "days")),
days.to.1d_abs = as.numeric(difftime(date, "2020-12-01", units = "days")), # setting Dec 1, 2020 as vaccine baseline to compare across vaccine events
days.to.1d_fromstart = as.numeric(difftime(date, date.first.vac, units = "days"))
)
#vac_1_dose[which.min(vac_1_dose$date),] #first country to get one dose per person
#days until country admins 2 doses per person
vac_2_doses <- covid %>%
dplyr::select(country, date, vaccine_dose_events, date.first.vac) %>%
filter(vaccine_dose_events == "2_doses")%>%
mutate(days.to.2d_rel = as.numeric(difftime(date, min(date), units = "days")),
days.to.2d_abs = as.numeric(difftime(date, "2020-12-01", units = "days")),
days.to.2d_fromstart = as.numeric(difftime(date, date.first.vac, units = "days"))
)
#vac_2_doses[which.min(vac_2_doses$date),] #first country to hit 2 doses
#days until country reports vaccinating 10% of pop
vac_10_df <- covid %>%
dplyr::select(country, date, vaccination_events, date.first.vac) %>%
filter(vaccination_events == "vac_10pct") %>%
mutate(days.to.10pct_rel = as.numeric(difftime(date, min(date), units = "days")),
days.to.10pct_abs = as.numeric(difftime(date, "2020-12-01", units = "days")),
days.to.10pct_fromstart = as.numeric(difftime(date, date.first.vac, units = "days"))
)
#nrow(vac_10_df)
# mean daily rate of vaccinations per million ppl in first 6 months of each country's administration
vac_rate <- covid %>%
dplyr::select(country, date, daily_vaccinations_per_million, date.first.vac) %>%
filter(daily_vaccinations_per_million > 0,
date <= (date.first.vac %m+% months(6))) %>% # daily vaccinations in 1st 6 mo - make relative to their own vaccine start date
drop_na(daily_vaccinations_per_million) %>%
group_by(country) %>%
summarise(daily.vac.per.mil_6moavg = mean(daily_vaccinations_per_million))
# max rate of vaccinations administration
vac_maxrate <- covid %>%
dplyr::select(country, date, daily_vaccinations_per_million, daily_vaccinations_raw, daily_vaccinations) %>%
group_by(country) %>%
mutate_if(is.numeric, ~replace(., is.na(.), -1)) %>% #temporarily replace na's with -1
summarise_if(is.numeric, max) %>%
na_if(-1) %>% #set -1's back to na
rename(daily.vac.raw_max = daily_vaccinations_raw,
daily.vac_max = daily_vaccinations,
daily.vac.per.mil_max = daily_vaccinations_per_million)
#big df for vaccine info
last.vac <- last.timepoint %>% dplyr::select("country"| contains("vacc"))#get just vaccine stuff from  last.timepoint
vac.df_list <- list(vac_1_dose, vac_2_doses, vac_start_df, vac_10_df, vac_rate, vac_maxrate, last.vac)
#drop date and event info since this is contained in col names
for (i in 1:length(vac.df_list)) {
vac.df_list[[i]] <- vac.df_list[[i]] %>% dplyr::select(-c(contains("date") | contains("events")))
}
vac.dump <- vac.df_list %>% reduce(full_join, by='country') %>% as.data.frame() #join
#skim(vac.dump)
vac.sum <- vac.dump %>% dplyr::select(
country,
days.to.start_rel, #days until a country reports starting to administer vaccines, with the 1st country to start vaccinating as a baseline
days.to.10pct_fromstart, #days between starting vaccinations and administering to 10% of pop
daily.vac.per.mil_6moavg, #mean daily vaccinations in the first 6 months of administering
people_vaccinated_per_hundred_last, #number of ppl vaccinated (at least once) at last report (sometime in 2022)
daily.vac.per.mil_max, #max number of vaccinations reported in a single day
total_vaccinations_per_hundred_last,# number of vaccine doses per hundred ppl at last report (sometime in 2022)
people_fully_vaccinated_per_hundred_last # number of people that received the full vaccine (typically 2 doses)
)
skim(vac.sum)
#drop NAs before PCA
vac.sum.pca <- vac.sum %>% na.omit()
#nrow(vac.sum.pca)
vax.pca3 <- prcomp(x = vac.sum.pca[,-1], scale. = TRUE, center = TRUE)
vax.pca3$rotation
summary(vax.pca3) # PVE of PC1=73.3%
plot(summary(vax.pca3)$importance[2, ],  # PVE
ylab="PVE",
xlab="Number of PC's",
pch = 16,
main="Scree Plot of PVE for Vaccination variables")
# Following the elbow rule, the first PC1 clearly explains a sufficient amount of variance. We will thus keep the first PC.
vac.sum.with.VSI <- vac.sum.pca # copy the data
vac.sum.with.VSI$VSI <- -vax.pca3$x[,1] # append the VSI (inverse signed PC1 scores), where a positive nb means a country was good at getting people vaccinated
# numerical summary
skim(vac.sum.with.VSI)
# plot sorted VSI scores
vac.sum.with.VSI %>%
ggplot(aes(x = reorder(country, VSI),
y = VSI, fill = country)) +
geom_bar(show.legend = FALSE, stat = "identity") +
xlab("Country") +
ylab("VSI") +
ggtitle("Vaccination Success Index (VSI) distribution") +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#summary(vac.sum.with.VSI$VSI)#VSI range
# plotting VSI world map using https://cran.r-project.org/web/packages/rworldmap/vignettes/rworldmap.pdf
sPDF <- joinCountryData2Map(vac.sum.with.VSI, joinCode = "NAME", nameJoinColumn = "country")
colourPalette <- RColorBrewer::brewer.pal(9, "RdPu") # define colors
classInt <- classInt::classIntervals(sPDF[["VSI"]], n = 9, style = "jenks") # getting class intervals using a ✬jenks✬ classification in classInt package
catMethod = classInt[["brks"]]
# select & run the two lines below together
mapParams <- mapCountryData(sPDF, nameColumnToPlot = "VSI",
addLegend = FALSE, catMethod = catMethod, colourPalette = colourPalette )
do.call(addMapLegend, c(mapParams, legendLabels = "all", legendWidth = 0.5, legendIntervals = "data", legendMar = 2))
# default plot
# mapCountryData(sPDF, nameColumnToPlot="VSI" ) # beware, colors will hurt your eyes
#merging WSD predictors with cases, deaths & maxrate data
case.wsd.wide <- inner_join(wsd.nocor, covid.nocor, by="country") #predictors only
#skim(case.wsd.wide)
#adding in VSI
yval <- vac.sum.with.VSI %>% dplyr::select("country", "VSI")
final.df <- inner_join(case.wsd.wide, yval,  by=("country"))
#names(final.df)
##WRITE CSVs FOR MODELING##
#write.csv(case.wsd.wide, "data/case.wsd.wide-predictors.csv", row.names = FALSE)
write.csv(final.df, "data/final.df.csv", row.names = FALSE)
# Split the data
N <- length(final.df$country)
n1 <- floor(.85*N)
n2 <- floor(.15*N)
#dropping vars we don't want to predict on
df.pred <- final.df %>% dplyr::select(-c(country, Continent, Country.Code, Year_latest, nYears_avg)) #drop years!
set.seed(10)
# Split data
idx_train <- sample(N, n1)
idx_val <- (which(! seq(1:N) %in% idx_train))
data.train <- as.data.frame(df.pred[idx_train,])
data.val <- as.data.frame(df.pred[idx_val,])
knitr::opts_chunk$set(echo = FALSE, fig.width=8, fig.height=4, warning=FALSE)
options(scipen = 0, digits = 3)  # controls base R output
# Package setup
if(!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, dplyr, ggplot2, ggthemes, data.table, lubridate,
GGally, RColorBrewer, ggsci, plotROC, usmap,
plotly, ggpubr, vistime, skimr, glmnet, dgCMatrix, leaps, car,
keras, neuralnet, tensorflow, missForest, corrplot, tree, randomForest, fastDummies,
rworldmap, RColorBrewer, classInt, matrixStats, kableExtra)
lm.econ.1 <- lm(data = data.train, formula = VSI ~ ExportGoodsServices.GDP_avg +
FinalConsumptionExpenditure.GDP_avg +
GDP.Current_avg +
GDP.PerCapita.Current_avg +
ConsumerPriceInflation_avg)
knitr::opts_chunk$set(echo = FALSE, fig.width=8, fig.height=4, warning=FALSE)
options(scipen = 0, digits = 3)  # controls base R output
# Package setup
if(!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, dplyr, ggplot2, ggthemes, data.table, lubridate,
GGally, RColorBrewer, ggsci, plotROC, usmap,
plotly, ggpubr, vistime, skimr, glmnet, dgCMatrix, leaps, car,
keras, neuralnet, tensorflow, missForest, corrplot, tree, randomForest, fastDummies,
rworldmap, RColorBrewer, classInt, matrixStats, kableExtra, stargazer)
# economic factors lm
lm.econ.1 <- lm(data = data.train, formula = VSI ~ ExportGoodsServices.GDP_avg +
FinalConsumptionExpenditure.GDP_avg +
GDP.Current_avg +
GDP.PerCapita.Current_avg +
ConsumerPriceInflation_avg)
#summary(lm.econ.1)
# remove non-significant variables w backward selection
lm.econ.1.refined <- update(lm.econ.1, .~. -ExportGoodsServices.GDP_avg)
#summary(lm.econ.1.refined)
lm.econ.2.refined <- update(lm.econ.1.refined, .~. -FinalConsumptionExpenditure.GDP_avg)
#summary(lm.econ.2.refined)
lm.econ.3.refined <- update(lm.econ.2.refined, .~. -GDP.Current_avg)
#summary(lm.econ.3.refined)
stargazer(lm.econ.1, lm.econ.1.refined, lm.econ.2.refined, lm.econ.3.refined)
# economic factors lm
lm.econ.1 <- lm(data = data.train, formula = VSI ~ ExportGoodsServices.GDP_avg +
FinalConsumptionExpenditure.GDP_avg +
GDP.Current_avg +
GDP.PerCapita.Current_avg +
ConsumerPriceInflation_avg)
#summary(lm.econ.1)
# remove non-significant variables w backward selection
lm.econ.1.refined <- update(lm.econ.1, .~. -ExportGoodsServices.GDP_avg)
#summary(lm.econ.1.refined)
lm.econ.2.refined <- update(lm.econ.1.refined, .~. -FinalConsumptionExpenditure.GDP_avg)
#summary(lm.econ.2.refined)
lm.econ.3.refined <- update(lm.econ.2.refined, .~. -GDP.Current_avg)
#summary(lm.econ.3.refined)
stargazer(lm.econ.1, lm.econ.1.refined, lm.econ.2.refined, lm.econ.3.refined)
# economic factors lm
lm.econ.1 <- lm(data = data.train, formula = VSI ~ ExportGoodsServices.GDP_avg +
FinalConsumptionExpenditure.GDP_avg +
GDP.Current_avg +
GDP.PerCapita.Current_avg +
ConsumerPriceInflation_avg)
#summary(lm.econ.1)
# remove non-significant variables w backward selection
lm.econ.1.refined <- update(lm.econ.1, .~. -ExportGoodsServices.GDP_avg)
#summary(lm.econ.1.refined)
lm.econ.2.refined <- update(lm.econ.1.refined, .~. -FinalConsumptionExpenditure.GDP_avg)
#summary(lm.econ.2.refined)
lm.econ.3.refined <- update(lm.econ.2.refined, .~. -GDP.Current_avg)
#summary(lm.econ.3.refined)
stargazer(lm.econ.1, lm.econ.1.refined, lm.econ.2.refined, lm.econ.3.refined)
data.train
knitr::opts_chunk$set(echo = FALSE, fig.width=8, fig.height=4, warning=FALSE)
options(scipen = 0, digits = 3)  # controls base R output
# Package setup
if(!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, dplyr, ggplot2, ggthemes, data.table, lubridate,
GGally, RColorBrewer, ggsci, plotROC, usmap,
plotly, ggpubr, vistime, skimr, glmnet, dgCMatrix, leaps, car,
keras, neuralnet, tensorflow, missForest, corrplot, tree, randomForest, fastDummies,
rworldmap, RColorBrewer, classInt, matrixStats, kableExtra, stargazer)
# economic factors lm
lm.econ.1 <- lm(data = data.train, formula = VSI ~ ExportGoodsServices.GDP_avg +
FinalConsumptionExpenditure.GDP_avg +
GDP.Current_avg +
GDP.PerCapita.Current_avg +
ConsumerPriceInflation_avg)
#summary(lm.econ.1)
# remove non-significant variables w backward selection
lm.econ.1.refined <- update(lm.econ.1, .~. -ExportGoodsServices.GDP_avg)
#summary(lm.econ.1.refined)
lm.econ.2.refined <- update(lm.econ.1.refined, .~. -FinalConsumptionExpenditure.GDP_avg)
#summary(lm.econ.2.refined)
lm.econ.3.refined <- update(lm.econ.2.refined, .~. -GDP.Current_avg)
#summary(lm.econ.3.refined)
stargazer(lm.econ.1, lm.econ.1.refined, lm.econ.2.refined, lm.econ.3.refined, type = "html", title="Results", align=TRUE, title = "Economic Model")
